name: Hibernate Reactive CI

on:
  push:
    branches:
      - master
    tags: '*'
  pull_request:
    branches: master

jobs:
  run_examples:
    name: Run examples on ${{ matrix.db }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        db: [ 'MySQL', 'PostgreSQL' ]
    services:
       # Label used to access the service container
      mysql:
        # Docker Hub image
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: hreact
          MYSQL_DATABASE: hreact
          MYSQL_USER: hreact
          MYSQL_PASSWORD: hreact
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
      postgres:
        # Docker Hub image
        image: postgres:13.0
        env:
          POSTGRES_DB: hreact
          POSTGRES_USER: hreact
          POSTGRES_PASSWORD: hreact
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: Get year/month for cache key
      id: get-date
      run: |
        echo "::set-output name=yearmonth::$(/bin/date -u "+%Y-%m")"
      shell: bash
    - name: Cache Gradle downloads
      uses: actions/cache@v2
      id: cache-gradle
      with:
        path: |
          .gradle/caches
          .gradle/jdks
          .gradle/wrapper
        # refresh cache every month to avoid unlimited growth
        key: gradle-examples-${{ matrix.db }}-${{ steps.get-date.outputs.yearmonth }}
    - name: Set up JDK 1.8
      with:
        java-version: 1.8
      uses: actions/setup-java@v1
    - name: Run examples on ${{ matrix.db }}
      run: ./gradlew :example:runAllExamplesOn${{ matrix.db }}
    - name: Upload reports (if build failed)
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: reports-examples-${{ matrix.db }}
        path: './**/build/reports/'

  test_dbs:
    name: Test with ${{ matrix.db }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        db: [ 'MySQL', 'PostgreSQL', 'DB2' ]
    steps:
    - uses: actions/checkout@v2
    - name: Get year/month for cache key
      id: get-date
      run: |
        echo "::set-output name=yearmonth::$(/bin/date -u "+%Y-%m")"
      shell: bash
    - name: Cache Gradle downloads
      uses: actions/cache@v2
      id: cache-gradle
      with:
        path: |
          .gradle/caches
          .gradle/jdks
          .gradle/wrapper
        # refresh cache every month to avoid unlimited growth
        key: gradle-db-${{ matrix.db }}-${{ steps.get-date.outputs.yearmonth }}
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build and Test with ${{ matrix.db }}
      run: ./gradlew build -Pdocker -Pdb=${{ matrix.db }}
    - name: Upload reports (if build failed)
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: reports-db-${{ matrix.db }}
        path: './**/build/reports/'

  test_jdks:
    name: Test with Java ${{ matrix.java.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java:
          - {
            name: "11",
            java-version: 11,
            release_type: "ga"
          }
          - {
            name: "15",
            java-version: 15,
            release_type: "ga"
          }
          - {
            name: "16-ea",
            java-version: 16,
            release_type: "ea"
          }
    steps:
    - uses: actions/checkout@v2
    - name: Get year/month for cache key
      id: get-date
      run: |
        echo "::set-output name=yearmonth::$(/bin/date -u "+%Y-%m")"
      shell: bash
    - name: Cache Gradle downloads
      uses: actions/cache@v2
      id: cache-gradle
      with:
        path: |
          .gradle/caches
          .gradle/jdks
          .gradle/wrapper
        # refresh cache every month to avoid unlimited growth
        key: gradle-java${{ matrix.java }}-${{ steps.get-date.outputs.yearmonth }}
    - name: Set up JDK ${{ matrix.java.name }}
      uses: joschi/setup-jdk@e87a7cec853d2dd7066adf837fe12bf0f3d45e52
      id: install-testjdk
      with:
        java-version: ${{ matrix.java.java-version }}
        release_type: ${{ matrix.java.release_type }}
    - name: Set up JDK 11
      uses: joschi/setup-jdk@e87a7cec853d2dd7066adf837fe12bf0f3d45e52
      id: install-compilejdk
      with:
        java-version: 11
    - name: Build and Test with Java ${{ matrix.java.name }}
      run: |
        ./gradlew build -Pdocker -Ptest.jdk.version=${{ matrix.java.java-version }} \
            -Porg.gradle.java.installations.paths=${{ steps.install-compilejdk.outputs.path }},${{ steps.install-testjdk.outputs.path }}
    - name: Upload reports (if build failed)
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: reports-java${{ matrix.java.name }}
        path: './**/build/reports/'

  snapshot:
    name: Create snapshot
    if: github.event_name == 'push' && startsWith( github.ref, 'refs/heads/' )
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Create artifacts
      run: ./gradlew assemble
    - name: Detect the version of Hibernate Reactive
      id: detect-version
      run: |
        sed -E 's/^projectVersion( *= *| +)([^ ]+)/::set-output name=version::\2/g' gradle/version.properties
    - name: Publish snapshot to JBoss Nexus (experimental, Nexus rejects some binaries)
      env:
        ORG_GRADLE_PROJECT_jbossNexusUser: ${{ secrets.JBOSS_NEXUS_USER }}
        ORG_GRADLE_PROJECT_jbossNexusPassword: ${{ secrets.JBOSS_NEXUS_PASSWORD }}
      if: endsWith( steps.detect-version.outputs.version, '-SNAPSHOT' ) && env.ORG_GRADLE_PROJECT_jbossNexusUser
      run: ./gradlew publish

  release:
    name: Release
    if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Create artifacts
      run: ./gradlew assemble
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        name: jboss_filemgmt
        key: ${{ secrets.JBOSS_FILEMGMT_SSH_KEY }}
        known_hosts: ${{ secrets.JBOSS_FILEMGMT_SSH_KNOWN_HOSTS }}
        config: |
          Host filemgmt.jboss.org
            User hibernate
            IdentityFile ~/.ssh/jboss_filemgmt
    - name: Publish documentation to jboss.org
      run: ./gradlew uploadDocumentation
    - name: Publish release to Bintray
      env:
        ORG_GRADLE_PROJECT_bintrayUser: ${{ secrets.BINTRAY_USER }}
        ORG_GRADLE_PROJECT_bintrayKey: ${{ secrets.BINTRAY_KEY }}
        ORG_GRADLE_PROJECT_sonatypeOssrhUser: ${{ secrets.SONATYPE_OSSRH_USER }}
        ORG_GRADLE_PROJECT_sonatypeOssrhPassword: ${{ secrets.SONATYPE_OSSRH_PASSWORD }}
      run: ./gradlew bintrayUpload bintrayPublish
