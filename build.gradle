plugins {
    id "local.versions"

    id 'java-library'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.asciidoctor.jvm.convert' version '4.0.2' apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = "org.hibernate.reactive"
// leverage the ProjectVersion which comes from the `local.versions` plugin
version = project.projectVersion.fullName

ext {
    if ( !project.hasProperty( 'sonatypeOssrhUser' ) ) {
        sonatypeOssrhUser = null
    }
    if ( !project.hasProperty( 'sonatypeOssrhPassword' ) ) {
        sonatypeOssrhPassword = null
    }
}

// Versions which need to be aligned across modules; this also
// allows overriding the build using a parameter, which can be
// useful to monitor compatibility for upcoming versions on CI:
//
// ./gradlew clean build -PhibernateOrmVersion=5.6.15-SNAPSHOT
ext {
    // Mainly, to allow CI to test the latest versions of Vert.X
    // Example:
    // ./gradlew build -PvertxSqlClientVersion=4.0.0-SNAPSHOT
    if ( !project.hasProperty( 'vertxSqlClientVersion' ) ) {
        vertxSqlClientVersion = '4.5.9'
    }

    testcontainersVersion = '1.19.8'

    logger.lifecycle "Vert.x SQL Client Version: " + project.vertxSqlClientVersion
}

// To release, see task ciRelease in release/build.gradle
// To publish on Sonatype (Maven Central):
// ./gradlew publishToSonatype closeAndReleaseStagingRepository -PsonatypeOssrhUser="<YOUR USERNAME>" -PsonatypeOssrhPassword="<YOUR PASSWORD>"
nexusPublishing {
    repositories {
        sonatype {
            username = project.sonatypeOssrhUser
            password = project.sonatypeOssrhPassword
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'

    group = rootProject.group
    version = rootProject.version

    spotless {
        //Don't fail during the check: rather than enforcing guidelines, we use this plugin to fix mistakes automatically.
        enforceCheck false
        java {
            licenseHeaderFile rootProject.file('spotless.license.java')
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    tasks.compileJava.dependsOn(spotlessApply)

    repositories {
        // Example: ./gradlew build -PenableMavenLocalRepo
        if ( project.hasProperty('enableMavenLocalRepo') ) {
            // Useful for local development, it should be disabled otherwise
            mavenLocal()
        }
        // Example: ./gradlew build -PenableSonatypeOpenSourceSnapshotsRep
        if ( project.hasProperty('enableSonatypeOpenSourceSnapshotsRep') ) {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        }

        mavenCentral()
    }
    
    ext.publishScript = rootProject.rootDir.absolutePath + '/publish.gradle'

    tasks.withType( JavaCompile ) {
        options.encoding = 'UTF-8'
    }

    if ( !gradle.ext.javaToolchainEnabled ) {
        sourceCompatibility = JavaVersion.toVersion( gradle.ext.baselineJavaVersion )
        targetCompatibility = JavaVersion.toVersion( gradle.ext.baselineJavaVersion )
    }
    else {
        // Configure generated bytecode
        // "sourceCompatibility" is not supported with toolchains. We have to work around that limitation.
        tasks.compileJava.configure {
            options.release = gradle.ext.javaVersions.main.release.asInt()
        }
        tasks.compileTestJava.configure {
            options.release = gradle.ext.javaVersions.test.release.asInt()
        }

	    // Configure version of Java tools
        java {
            toolchain {
                languageVersion = gradle.ext.javaVersions.main.compiler
            }
        }
        tasks.compileTestJava {
            javaCompiler = javaToolchains.compilerFor {
                languageVersion = gradle.ext.javaVersions.test.compiler
            }
        }
        tasks.test {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = gradle.ext.javaVersions.test.launcher
            }
        }

        // Configure JVM Options
        tasks.withType( JavaCompile ).configureEach {
            options.forkOptions.jvmArgs.addAll( getProperty( 'toolchain.compiler.jvmargs' ).toString().split( ' ' ) )
        }
        tasks.withType( Javadoc ).configureEach {
		    options.setJFlags( getProperty( 'toolchain.javadoc.jvmargs' ).toString().split( ' ' ).toList().findAll( { !it.isEmpty() } ) )
        }
        tasks.test {
            // Configure JVM Options
            jvmArgs(getProperty('toolchain.launcher.jvmargs').toString().split(' '))
            if ( project.hasProperty( 'test.jdk.launcher.args' ) ) {
                jvmArgs( project.getProperty( 'test.jdk.launcher.args' ).toString().split( ' ' ) )
            }
        }

	    // Display version of Java tools
        tasks.withType( JavaCompile ).configureEach {
            doFirst {
                logger.lifecycle "Compiling with '${javaCompiler.get().metadata.installationPath}'"
            }
        }
        tasks.withType( Javadoc ).configureEach {
            doFirst {
                logger.lifecycle "Generating javadoc with '${javadocTool.get().metadata.installationPath}'"
            }
        }
        tasks.test {
            doFirst {
                logger.lifecycle "Testing with '${javaLauncher.get().metadata.installationPath}'"
            }
        }
    }
}

