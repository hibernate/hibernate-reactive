import org.asciidoctor.gradle.jvm.AsciidoctorTask
import java.time.Year

apply plugin: 'org.asciidoctor.jvm.convert'

ext {
	projectsToSkipWhenAggregatingJavadocs = [
			'example',
			'release',
			'documentation'
	]
}

rootProject.subprojects { subproject ->
	if ( !this.projectsToSkipWhenAggregatingJavadocs.contains( subproject.name ) ) {
		this.evaluationDependsOn( subproject.path )
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Aggregated JavaDoc
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

final File javadocDir = mkdir( new File( (File) project.buildDir, 'javadocs' ) )

/**
 * Builds the JavaDocs aggregated (unified) across all the sub-projects
 */
task aggregateJavadocs(type: Javadoc, group: 'Documentation') {
    description = 'Builds the aggregated (unified) JavaDocs across all sub-projects'

	final int inceptionYear = 2020
    final int currentYear = Year.now().getValue()

    // exclude any generated sources and internal packages
    exclude( '**/generated-src/**' )
	exclude( '**/src/main/generated/**' )
    exclude( '**/internal/**' )
	exclude( '**/impl/**' )

	// apply standard config
	maxMemory = '512m'
	destinationDir = javadocDir
	configure( options ) {
		overview = project.file( 'src/main/javadoc/overview.html' )
		windowTitle = 'Hibernate Reactive API documentation'
		docTitle = "Hibernate Reactive API documentation ($project.version)"
		bottom = "Copyright &copy; $inceptionYear-$currentYear <a href=\"http://redhat.com\">Red Hat, Inc</a>. All Rights Reserved."
		use = true
		options.encoding = 'UTF-8'

		def matcher = hibernateOrmVersion =~ /\d+\.\d+/

		links = [
				'https://docs.oracle.com/javase/8/docs/api/',
				'http://docs.jboss.org/hibernate/beanvalidation/spec/2.0/api/',
				'https://javaee.github.io/javaee-spec/javadocs/',
//				"https://docs.jboss.org/hibernate/orm/" + ormMinorVersion + "/javadocs/"
		]

		options.addStringOption( 'Xdoclint:none', '-quiet' )

		if ( gradle.ext.javaToolchainEnabled ) {
			options.setJFlags( getProperty( 'toolchain.javadoc.jvmargs' ).toString().
					split( ' ' ).toList().findAll( { !it.isEmpty() } ) )
		}
	}

	if ( gradle.ext.javaToolchainEnabled ) {
		// Display version of Java tools
		doFirst {
			logger.lifecycle "Aggregating javadoc with '${javadocTool.get().metadata.installationPath}'"
		}
	}

    // process each project, building up:
    //      1) appropriate sources
    //      2) classpath
    parent.subprojects.each { Project subProject->
        // skip certain sub-projects
		if ( ! project.projectsToSkipWhenAggregatingJavadocs.contains( subProject.name ) ) {
			// we only care about the main SourceSet...
			source subProject.sourceSets.main.java

			classpath += subProject.sourceSets.main.output + subProject.sourceSets.main.compileClasspath
		}
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Asciidoc
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

asciidoctor {
	// we do not want it creating its "default task"
	enabled = false
}

task renderReferenceDocumentation(type: AsciidoctorTask, group: 'Documentation') {
    description = 'Renders the Reference Documentation in HTML format using Asciidoctor.'
    sourceDir = file( 'src/main/asciidoc/reference' )
    sources {
        include 'index.adoc'
    }

    outputDir = new File("$buildDir/asciidoc/reference/html_single")
    options logDocuments: true
	attributes icons: 'font', experimental: true,
			   'source-highlighter': 'prettify',
			   linkcss: true,
			   majorMinorVersion: project.version.family,
			   fullVersion: project.version.toString(),
			   docinfo: 'private'
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// All
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

task assembleDocumentation(dependsOn: [aggregateJavadocs, renderReferenceDocumentation]) {
	group 'Documentation'
	description 'Grouping task for performing all documentation building tasks'

	logger.lifecycle "Documentation groupId: '" + project.group + "', version: '" + project.version + "' (Jakarta EE edition)"
}

assemble.dependsOn assembleDocumentation
