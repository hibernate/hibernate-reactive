ext {
	mavenPomName = 'Hibernate Reactive Core'
}

description = 'The core module of Hibernate Reactive'

apply from: publishScript

dependencies {

    api "org.hibernate.orm:hibernate-core:${hibernateOrmVersion}"

    api 'io.smallrye.reactive:mutiny:2.7.0'

    //Logging
    implementation 'org.jboss.logging:jboss-logging:3.6.1.Final'
    annotationProcessor 'org.jboss.logging:jboss-logging:3.6.1.Final'

    compileOnly 'org.jboss.logging:jboss-logging-annotations:3.0.3.Final'
    annotationProcessor 'org.jboss.logging:jboss-logging-annotations:3.0.3.Final'
    annotationProcessor 'org.jboss.logging:jboss-logging-processor:3.0.3.Final'


    //Specific implementation details of Hibernate Reactive:
    implementation "io.vertx:vertx-sql-client:${vertxSqlClientVersion}"

    // Testing
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation "io.vertx:vertx-junit5:${vertxSqlClientVersion}"

    // Drivers
    testImplementation "io.vertx:vertx-pg-client:${vertxSqlClientVersion}"
    testImplementation "io.vertx:vertx-mysql-client:${vertxSqlClientVersion}"
    testImplementation "io.vertx:vertx-db2-client:${vertxSqlClientVersion}"
    testImplementation "io.vertx:vertx-mssql-client:${vertxSqlClientVersion}"
    testImplementation "io.vertx:vertx-oracle-client:${vertxSqlClientVersion}"

    // Metrics
    testImplementation "io.vertx:vertx-micrometer-metrics:${vertxSqlClientVersion}"

    // Optional dependency of vertx-pg-client, essential when connecting via SASL SCRAM
    testImplementation 'com.ongres.scram:client:2.1'

    // JUnit Jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.3'

    // JDBC driver to test with ORM and PostgreSQL
    testRuntimeOnly "org.postgresql:postgresql:42.7.4"

    // JDBC driver for Testcontainers with MS SQL Server
    testRuntimeOnly "com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre11"

    // JDBC driver for Testcontainers with MariaDB Server
    testRuntimeOnly "org.mariadb.jdbc:mariadb-java-client:3.5.1"

    // JDBC driver for Testcontainers with MYSQL Server
    testRuntimeOnly "com.mysql:mysql-connector-j:9.1.0"

    // JDBC driver for Db2 server, for testing
    testRuntimeOnly "com.ibm.db2:jcc:12.1.0.0"

    // EHCache
    testRuntimeOnly ("org.ehcache:ehcache:3.10.8") {
            capabilities {
                requireCapability 'org.ehcache.modules:ehcache-xml-jakarta'
            }
    }
    testRuntimeOnly ("org.hibernate.orm:hibernate-jcache:${hibernateOrmVersion}")

    // log4j
    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.20.0'

    // Testcontainers
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
    testImplementation "org.testcontainers:mariadb:${testcontainersVersion}"
    testImplementation "org.testcontainers:db2:${testcontainersVersion}"
    testImplementation "org.testcontainers:cockroachdb:${testcontainersVersion}"
    testImplementation "org.testcontainers:mssqlserver:${testcontainersVersion}"
    testImplementation "org.testcontainers:oracle-xe:${testcontainersVersion}"
}

// Reproducible Builds

// https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
// Configure archive tasks to produce reproducible archives:
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// Print a summary of the results of the tests (number of failures, successes and skipped)
def loggingSummary(db, result, desc) {
    if ( !desc.parent ) { // will match the outermost suite
        def output = "${db} results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def repeatLength = output.length() + 1
        logger.lifecycle '\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength)
    }
}

// Example:
// gradle test -Pdb=MySQL
test {
	def selectedDb = project.hasProperty( 'db' )
			? project.properties['db']
			: 'PostgreSQL'
	doFirst {
		systemProperty 'db', selectedDb
	}
	afterSuite { desc, result ->
		loggingSummary( selectedDb, result, desc )
	}
}

// Configuration for the tests
tasks.withType( Test ).configureEach {
    defaultCharacterEncoding = "UTF-8"
    useJUnitPlatform()
    testLogging {
        showStandardStreams = project.hasProperty('showStandardOutput')
        showStackTraces = true
        exceptionFormat = 'full'
        displayGranularity = 1
        events = ['PASSED', 'FAILED', 'SKIPPED']
    }
    systemProperty 'docker', project.hasProperty( 'docker' ) ? 'true' : 'false'
    systemProperty 'org.hibernate.reactive.common.InternalStateAssertions.ENFORCE', 'true'

    if ( project.hasProperty( 'includeTests' ) ) {
        // Example: ./gradlew testAll -PincludeTests=DefaultPortTest
        filter {
            includeTestsMatching project.properties['includeTests'] ?: '*' as String
        }
    }
}

def createTestDbTask(dbName) {
    tasks.register( "testDb${dbName}", Test ) {
        description = "Run tests for ${dbName}"

        doFirst() {
            systemProperty 'db', dbName
        }
        afterSuite { desc, result ->
            loggingSummary( dbName, result, desc )
        }
    }
}

// Rule to recognize calls to testDb<dbName>
// and run the tests on the selected db
// Example:
// gradle testDbMySQL testDbDB2
tasks.addRule( "Pattern testDb<id>" ) { String taskName ->
    if ( taskName.startsWith( "testDb" ) ) {
        def dbName = taskName.substring( "testDb".length() )
        createTestDbTask( dbName )
    }
}

// The dbs we want to test when running testAll
def dbs = ['MariaDB', 'MySQL', 'PostgreSQL', 'DB2', 'CockroachDB', 'MSSQLServer', 'Oracle']
dbs.forEach { createTestDbTask it }

tasks.register( "testAll", Test ) {
    description = "Run tests for ${dbs}"
    dependsOn = dbs.collect( [] as HashSet ) { db -> "testDb${db}" }
}
