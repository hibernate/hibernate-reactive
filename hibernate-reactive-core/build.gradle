ext {
	mavenPomName = 'Hibernate Reactive Core'
}

description = 'The core module of Hibernate Reactive'

apply from: publishScript

dependencies {

    api(libs.org.hibernate.orm.hibernate.core)

    api(libs.io.smallrye.reactive.mutiny)

    //Logging
    implementation(libs.org.jboss.logging.jboss.logging)
    compileOnly(libs.org.jboss.logging.jboss.logging.annotations)

    annotationProcessor(libs.org.jboss.logging.jboss.logging)
    annotationProcessor(libs.org.jboss.logging.jboss.logging.annotations)
    annotationProcessor(libs.org.jboss.logging.jboss.logging.processor)

    //Specific implementation details of Hibernate Reactive:
    implementation(libs.io.vertx.vertx.sql.client)

    // Testing
    testImplementation(libs.org.assertj.assertj.core)
    testImplementation(libs.io.vertx.vertx.junit5)

    // Drivers
    testImplementation(libs.io.vertx.vertx.pg.client)
    testImplementation(libs.io.vertx.vertx.mysql.client)
    testImplementation(libs.io.vertx.vertx.db2.client)
    testImplementation(libs.io.vertx.vertx.mssql.client)
    testImplementation(libs.io.vertx.vertx.oracle.client)

    // Metrics
    testImplementation(libs.io.vertx.vertx.micrometer.metrics)

    // Optional dependency of vertx-pg-client, essential when connecting via SASL SCRAM
    testImplementation(libs.com.ongres.scram.client)

    // JUnit Jupiter
    testImplementation(libs.org.junit.jupiter.junit.jupiter.api)
    testRuntimeOnly(libs.org.junit.jupiter.junit.jupiter.engine)
    testRuntimeOnly(libs.org.junit.platform.junit.platform.launcher)

    // JDBC driver to test with ORM and PostgreSQL
    testRuntimeOnly(libs.org.postgresql.postgresql)

    // JDBC driver for Testcontainers with MS SQL Server
    testRuntimeOnly(libs.com.microsoft.sqlserver.mssql.jdbc)

    // JDBC driver for Testcontainers with MariaDB Server
    testRuntimeOnly(libs.org.mariadb.jdbc.mariadb.java.client)

    // JDBC driver for Testcontainers with MYSQL Server
    testRuntimeOnly(libs.com.mysql.mysql.connector.j)

    // JDBC driver for Db2 server, for testing
    testRuntimeOnly(libs.com.ibm.db2.jcc)

    // EHCache
    testRuntimeOnly(libs.org.ehcache.ehcache) {
            capabilities {
                requireCapability 'org.ehcache.modules:ehcache-xml-jakarta'
            }
    }
    testRuntimeOnly(libs.org.hibernate.orm.hibernate.jcache)

    // log4j
    testRuntimeOnly(libs.org.apache.logging.log4j.log4j.core)

    // Testcontainers
    testImplementation(libs.org.testcontainers.postgresql)
    testImplementation(libs.org.testcontainers.mysql)
    testImplementation(libs.org.testcontainers.mariadb)
    testImplementation(libs.org.testcontainers.db2)
    testImplementation(libs.org.testcontainers.cockroachdb)
    testImplementation(libs.org.testcontainers.mssqlserver)
    testImplementation(libs.org.testcontainers.oracle.xe)
}

// Print a summary of the results of the tests (number of failures, successes and skipped)
def loggingSummary(db, result, desc) {
    if ( !desc.parent ) { // will match the outermost suite
        def output = "${db} results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def repeatLength = output.length() + 1
        logger.lifecycle '\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength)
    }
}

// Example:
// gradle test -Pdb=MySQL
test {
	def selectedDb = project.hasProperty( 'db' )
			? project.properties['db']
			: 'PostgreSQL'
	doFirst {
		systemProperty 'db', selectedDb
	}
	afterSuite { desc, result ->
		loggingSummary( selectedDb, result, desc )
	}
}

// Configuration for the tests
tasks.withType( Test ).configureEach {
    defaultCharacterEncoding = "UTF-8"
    useJUnitPlatform()
    testLogging {
        showStandardStreams = project.hasProperty('showStandardOutput')
        showStackTraces = true
        exceptionFormat = 'full'
        displayGranularity = 1
        events = ['PASSED', 'FAILED', 'SKIPPED']
    }
    systemProperty 'docker', project.hasProperty( 'docker' ) ? 'true' : 'false'
    systemProperty 'org.hibernate.reactive.common.InternalStateAssertions.ENFORCE', 'true'

    if ( project.hasProperty( 'includeTests' ) ) {
        // Example: ./gradlew testAll -PincludeTests=DefaultPortTest
        filter {
            includeTestsMatching project.properties['includeTests'] ?: '*' as String
        }
    }
}

def createTestDbTask(dbName) {
    tasks.register( "testDb${dbName}", Test ) {
        description = "Run tests for ${dbName}"

        doFirst() {
            systemProperty 'db', dbName
        }
        afterSuite { desc, result ->
            loggingSummary( dbName, result, desc )
        }
    }
}

// Rule to recognize calls to testDb<dbName>
// and run the tests on the selected db
// Example:
// gradle testDbMySQL testDbDB2
tasks.addRule( "Pattern testDb<id>" ) { String taskName ->
    if ( taskName.startsWith( "testDb" ) ) {
        def dbName = taskName.substring( "testDb".length() )
        createTestDbTask( dbName )
    }
}

// The dbs we want to test when running testAll
def dbs = ['MariaDB', 'MySQL', 'PostgreSQL', 'DB2', 'CockroachDB', 'MSSQLServer', 'Oracle']
dbs.forEach { createTestDbTask it }

tasks.register( "testAll", Test ) {
    description = "Run tests for ${dbs}"
    dependsOn = dbs.collect( [] as HashSet ) { db -> "testDb${db}" }
}

// Task to print the resolved versions of Hibernate ORM and Vert.x
tasks.register( "printResolvedVersions" ) {
    description = "Print the resolved hibernate-orm-core and vert.x versions"
    doLast {
        def hibernateCoreVersion = "n/a"
        def vertxVersion = "n/a"
        
        // Resolve Hibernate Core and Vert.x versions from compile classpath
        configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.moduleVersion.id.name == 'hibernate-core') {
                hibernateCoreVersion = artifact.moduleVersion.id.version
            }
            if (artifact.moduleVersion.id.group == 'io.vertx' && artifact.moduleVersion.id.name == 'vertx-sql-client') {
                vertxVersion = artifact.moduleVersion.id.version
            }
        }

        // Print the resolved versions
        println "Resolved Hibernate ORM Core Version: ${hibernateCoreVersion}"
        println "Resolved Vert.x SQL client Version: ${vertxVersion}"
    }
}

// Make the version printing task run before tests and JavaExec tasks
tasks.withType( Test ).configureEach {
    dependsOn printResolvedVersions
}

tasks.withType( JavaExec ).configureEach {
    dependsOn printResolvedVersions
}
