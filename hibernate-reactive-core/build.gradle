ext {
	mavenPomName = 'Hibernate Reactive Core'
}

description = 'The core module of Hibernate Reactive'

apply from: publishScript

dependencies {

    api ("org.hibernate:hibernate-core:${hibernateOrmVersion}") {
        //We don't need any of these:
        exclude group: 'org.javassist', module: 'javassist'
        exclude group: 'javax.activation', module: 'javax.activation-api'
    }

    api 'io.smallrye.reactive:mutiny:0.14.0'

    //Logging
    implementation 'org.jboss.logging:jboss-logging:3.3.2.Final'
    implementation 'com.ibm.async:asyncutil:0.1.0'
//    compileOnly 'org.jboss.logging:jboss-logging-annotations:2.1.0.Final'
//    annotationProcessor 'org.jboss.logging:jboss-logging-processor:2.1.0.Final'

    //Specific implementation details of Hibernate Reactive:
    implementation "io.vertx:vertx-sql-client:${vertxVersion}"

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation "io.vertx:vertx-unit:${vertxVersion}"

    // Drivers
    testImplementation "io.vertx:vertx-pg-client:${vertxVersion}"
    testImplementation "io.vertx:vertx-mysql-client:${vertxVersion}"
    testImplementation "io.vertx:vertx-db2-client:${vertxVersion}"

    // JDBC driver to test with ORM and PostgreSQL
    testRuntimeOnly "org.postgresql:postgresql:42.2.16"

    // EHCache
    testRuntimeOnly "org.ehcache:ehcache:3.8.1"
    testRuntimeOnly ("org.hibernate:hibernate-jcache:${hibernateOrmVersion}") {
        //We don't need any of these:
        exclude group: 'org.javassist', module: 'javassist'
        exclude group: 'javax.activation', module: 'javax.activation-api'
    }

    // log4j
    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.14.0'
//    testRuntimeOnly 'org.slf4j:slf4j-log4j12:1.7.30'

    // Testcontainers
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
    testImplementation "org.testcontainers:mariadb:${testcontainersVersion}"
    testImplementation "org.testcontainers:db2:${testcontainersVersion}"
    testImplementation "org.testcontainers:cockroachdb:${testcontainersVersion}"
}

// Print a summary of the results of the tests (number of failures, successes and skipped)
def loggingSummary(db, result, desc) {
    if ( !desc.parent ) { // will match the outermost suite
        def output = "${db} results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def repeatLength = output.length() + 1
        logger.lifecycle '\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength)
    }
}

// Configuration for the tests
tasks.withType(Test) {
    defaultCharacterEncoding = "UTF-8"
    testLogging {
        displayGranularity 1
        showStandardStreams = false
        showStackTraces = true
        exceptionFormat = 'full'
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    systemProperty 'docker', project.hasProperty( 'docker' ) ? 'true' : 'false'
    systemProperty 'org.hibernate.reactive.common.InternalStateAssertions.ENFORCE', 'true'

    if ( project.hasProperty( 'includeTests' ) ) {
        // Example: ./gradlew testAll -PincludeTests=DefaultPortTest
        filter {
            includeTestsMatching project.getProperty( 'includeTests' ) ?: '*'
        }
    }
}

// Example:
// gradle test -Pdb=MySQL
test {
    // Enable JUnit 5
    useJUnitPlatform()

    def selectedDb = project.hasProperty( 'db' )
            ? project.getProperty( 'db' )
            : 'PostgreSQL'
    afterSuite { desc, result ->
        loggingSummary( selectedDb, result, desc )
    }
    doFirst {
        systemProperty 'db', selectedDb
    }
}

// Rule to recognize calls to testDb<dbName>
// and run the tests on the selected db
// Example:
// gradle testDbMySQL testDbDB2
tasks.addRule( "Pattern testDb<id>" ) { String taskName ->
    if ( taskName.startsWith( "testDb" ) ) {
        task( type: Test, taskName ) {
            def dbName = taskName.substring( "testDb".length() )
            description = "Run tests for ${dbName}"

            afterSuite { desc, result ->
                loggingSummary( dbName, result, desc )
            }
            doFirst() {
                systemProperty 'db', dbName
            }
        }
    }
}

// The dbs we want to test when running testAll
def dbs = ["MariaDB", 'MySQL', 'PostgreSQL', 'DB2', 'CockroachDB']
task testAll( dependsOn: dbs.collect( [] as HashSet ) { db -> "testDb${db}" } ) {
    description = "Run tests for ${dbs}"
}

spotless {
    //Don't fail during the check: rather than enforcing guidelines, we use this plugin to fix mistakes automatically.
    enforceCheck false
    java {
        licenseHeaderFile 'spotless.license.java'
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.compileJava.dependsOn(spotlessApply)
