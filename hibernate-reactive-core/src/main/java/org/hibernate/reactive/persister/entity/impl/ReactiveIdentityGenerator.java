/* Hibernate, Relational Persistence for Idiomatic Java
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright: Red Hat Inc. and Hibernate Authors
 */
package org.hibernate.reactive.persister.entity.impl;


import org.hibernate.cfg.AvailableSettings;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.identity.CockroachDBIdentityColumnSupport;
import org.hibernate.id.IdentityGenerator;
import org.hibernate.id.PostInsertIdentityPersister;
import org.hibernate.id.insert.InsertGeneratedIdentifierDelegate;
import org.hibernate.reactive.logging.impl.Log;

import static java.lang.invoke.MethodHandles.lookup;
import static org.hibernate.reactive.logging.impl.LoggerFactory.make;

/**
 * Fix the insert and select id queries generated by Hibernate ORM
 */
public class ReactiveIdentityGenerator extends IdentityGenerator {

	private static final Log LOG = make( Log.class, lookup() );

	/**
	 * @see CockroachDBIdentityColumnSupport#supportsIdentityColumns() for some limitations related to CockraochDB
	 */
	@Override
	public InsertGeneratedIdentifierDelegate getGeneratedIdentifierDelegate(PostInsertIdentityPersister persister) {
		Dialect dialect = persister.getFactory().getJdbcServices().getDialect();
		boolean generatedKeysEnabled = persister.getFactory().getSessionFactoryOptions().isGetGeneratedKeysEnabled();
		if ( !generatedKeysEnabled ) {
			LOG.debugf( "Ignoring property `%s`", AvailableSettings.USE_GET_GENERATED_KEYS );
		}
		// With JDBC, it's possible to select different type of queries for the retrieval of the id after
		// an insert. But, we don't need this in Hibernate Reactive, and it's easier to just run the most efficient query
		// for the selected database.
		return dialect.getIdentityColumnSupport().buildGetGeneratedKeysDelegate( persister, dialect );
	}
}
