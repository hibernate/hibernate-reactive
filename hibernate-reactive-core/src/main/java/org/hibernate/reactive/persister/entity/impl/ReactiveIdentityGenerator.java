/* Hibernate, Relational Persistence for Idiomatic Java
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright: Red Hat Inc. and Hibernate Authors
 */
package org.hibernate.reactive.persister.entity.impl;


import org.hibernate.dialect.Dialect;
import org.hibernate.id.IdentityGenerator;
import org.hibernate.id.insert.InsertGeneratedIdentifierDelegate;
import org.hibernate.persister.entity.EntityPersister;
import org.hibernate.reactive.generator.values.internal.ReactiveGeneratedValuesHelper;
import org.hibernate.reactive.id.insert.ReactiveBasicSelectingDelegate;
import org.hibernate.reactive.id.insert.ReactiveGetGeneratedKeysDelegate;
import org.hibernate.reactive.id.insert.ReactiveInsertReturningDelegate;
import org.hibernate.reactive.id.insert.ReactiveUniqueKeySelectingDelegate;


import static org.hibernate.generator.EventType.INSERT;
import static org.hibernate.generator.values.internal.GeneratedValuesHelper.noCustomSql;
import static org.hibernate.internal.NaturalIdHelper.getNaturalIdPropertyNames;
import static org.hibernate.reactive.generator.values.internal.ReactiveGeneratedValuesHelper.supportReactiveGetGeneratedKey;

/**
 * Fix the insert and select id queries generated by Hibernate ORM
 */
public class ReactiveIdentityGenerator extends IdentityGenerator {

	@Override
	public InsertGeneratedIdentifierDelegate getGeneratedIdentifierDelegate(EntityPersister persister) {
		final Dialect dialect = persister.getFactory().getJdbcServices().getDialect();
		/*
			Hibernate ORM allows the selection of different strategies based on the property `hibernate.jdbc.use_get_generated_keys`
			but Vertex driver does not support get generated keys.
		 */
		final boolean supportsInsertReturning = ReactiveGeneratedValuesHelper.supportsInsertReturning( dialect );
		if ( supportsInsertReturning && noCustomSql( persister, INSERT ) ) {
			return new ReactiveInsertReturningDelegate( persister, INSERT );
		}
		else if ( supportReactiveGetGeneratedKey( dialect, persister.getGeneratedProperties( INSERT ) ) ) {
			return new ReactiveGetGeneratedKeysDelegate( persister, false, INSERT );
		}
		else if ( persister.getNaturalIdentifierProperties() != null
				&& !persister.getEntityMetamodel().isNaturalIdentifierInsertGenerated() ) {
			return new ReactiveUniqueKeySelectingDelegate( persister, getNaturalIdPropertyNames( persister ), INSERT );
		}
		else {
			return new ReactiveBasicSelectingDelegate( persister );
		}
	}
}
