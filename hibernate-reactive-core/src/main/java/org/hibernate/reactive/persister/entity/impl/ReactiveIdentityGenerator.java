/* Hibernate, Relational Persistence for Idiomatic Java
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright: Red Hat Inc. and Hibernate Authors
 */
package org.hibernate.reactive.persister.entity.impl;


import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.identity.CockroachDBIdentityColumnSupport;
import org.hibernate.id.IdentityGenerator;
import org.hibernate.id.PostInsertIdentityPersister;
import org.hibernate.id.insert.InsertGeneratedIdentifierDelegate;
import org.hibernate.reactive.id.insert.ReactiveInsertReturningDelegate;
import org.hibernate.reactive.logging.impl.Log;

import static java.lang.invoke.MethodHandles.lookup;
import static org.hibernate.reactive.logging.impl.LoggerFactory.make;

/**
 * Fix the insert and select id queries generated by Hibernate ORM
 */
public class ReactiveIdentityGenerator extends IdentityGenerator {

	private static final Log LOG = make( Log.class, lookup() );

	/**
	 * @see CockroachDBIdentityColumnSupport#supportsIdentityColumns() for some limitations related to CockraochDB
	 */
	@Override
	public InsertGeneratedIdentifierDelegate getGeneratedIdentifierDelegate(PostInsertIdentityPersister persister) {
		Dialect dialect = persister.getFactory().getJdbcServices().getDialect();
		// Hibernate ORM allows the selection of different strategies based on the property `hibernate.jdbc.use_get_generated_keys`.
		// But that's a specific JDBC property and with Vert.x we only have one viable option for each supported database.
		return new ReactiveInsertReturningDelegate( persister, dialect );
	}
}
