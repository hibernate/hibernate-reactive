package org.hibernate.reactive.service;

import org.hibernate.reactive.service.initiator.ReactiveConnectionPoolProvider;
import org.hibernate.reactive.util.impl.CompletionStages;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.tool.schema.internal.exec.GenerationTarget;

import java.util.concurrent.CompletionStage;

/**
 * Adaptor that redirects DDL generated by the schema export
 * tool to the reactive connection.
 *
 * @author Gavin King
 */
public class ReactiveGenerationTarget implements GenerationTarget {
	private ServiceRegistry registry;
	private CompletionStage<ReactiveConnection> commands;

	public ReactiveGenerationTarget(ServiceRegistry registry) {
		this.registry = registry;
	}

	@Override
	public void prepare() {
		commands = registry.getService( ReactiveConnectionPoolProvider.class ).getConnection();
	}

	@Override
	public void accept(String command) {
		commands = commands.thenCompose(
				connection -> connection.execute( command )
						.handle( (r, e) -> {
							if ( e != null ) {
								System.out.println( e.getMessage() );
							}
							return null;
						} )
						.thenApply( v -> connection )
		);
	}

	@Override
	public void release() {
		if ( commands != null ) {
			commands.whenComplete( (c, e) -> c.close() )
					.toCompletableFuture()
					.join();
		}
	}
}
