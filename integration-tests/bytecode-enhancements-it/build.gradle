description = 'Bytecode enhancements integration tests'

ext {
    log4jVersion = '2.20.0'
    assertjVersion = '3.24.2'
}

dependencies {
    implementation project(':hibernate-reactive-core')

    // JPA metamodel generation for criteria queries (optional)
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateOrmVersion}"

    // Testing on one database should be enough
    runtimeOnly "io.vertx:vertx-pg-client:${vertxVersion}"
    // Allow authentication to PostgreSQL using SCRAM:
    runtimeOnly 'com.ongres.scram:client:2.1'

    // logging
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // JUnit5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // Testcontainers
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"

    // Testing
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "io.vertx:vertx-junit5:${vertxVersion}"
}

buildscript {
    repositories {
        // Example: ./gradlew build -PenableMavenLocalRepo
        if ( project.hasProperty( 'enableMavenLocalRepo' ) ) {
            // Useful for local development, it should be disabled otherwise
            mavenLocal()
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.hibernate.orm:hibernate-gradle-plugin:${hibernateOrmGradlePluginVersion}"
    }
}


// Hibernate Gradle plugin to enable bytecode enhancements
apply plugin: 'org.hibernate.orm'

hibernate {
    enhancement {
        lazyInitialization(true)
        dirtyTracking(true)
        associationManagement(false)
    }
}

// Print a summary of the results of the tests (number of failures, successes and skipped)
// This is the same as the one in hibernate-reactive-core
def loggingSummary(db, result, desc) {
    if ( !desc.parent ) { // will match the outermost suite
        def output = "${db} results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def repeatLength = output.length() + 1
        logger.lifecycle '\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength)
    }
}

// Configuration for the tests
// This is the same as the one in hibernate-reactive-core
tasks.withType(Test) {
    defaultCharacterEncoding = "UTF-8"
    testLogging {
        displayGranularity 1
        showStandardStreams = project.hasProperty('showStandardOutput')
        showStackTraces = true
        exceptionFormat = 'full'
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    systemProperty 'docker', project.hasProperty( 'docker' ) ? 'true' : 'false'
    systemProperty 'org.hibernate.reactive.common.InternalStateAssertions.ENFORCE', 'true'

    if ( project.hasProperty( 'includeTests' ) ) {
        // Example: ./gradlew testAll -PincludeTests=DefaultPortTest
        filter {
            includeTestsMatching project.getProperty( 'includeTests' ) ?: '*'
        }
    }
}

test {
    useJUnitPlatform()
    def selectedDb = project.hasProperty( 'db' )
            ? project.getProperty( 'db' )
            : 'PostgreSQL'

    // We only want to test this on Postgres
    onlyIf { selectedDb.toLowerCase().startsWith( 'p' ) }
    afterSuite { desc, result ->
        loggingSummary( 'PostgreSQL', result, desc )
    }
    doFirst {
        systemProperty 'db', selectedDb
    }
}

// Rule to recognize calls to testDb<dbName>
// and run the tests on the selected db
// Example:
// gradle testDbMySQL testDbDB2
tasks.addRule( "Pattern testDb<id>" ) { String taskName ->
    if ( taskName.startsWith( "testDb" ) ) {
        task( type: Test, taskName ) {
            def dbName = taskName.substring( "testDb".length() )
            description = "Run tests for ${dbName}"

            // We only want to test this on Postgres
            onlyIf { dbName.toLowerCase().startsWith( 'p' ) }
            afterSuite { desc, result ->
                loggingSummary( dbName, result, desc )
            }
            doFirst() {
                systemProperty 'db', dbName
            }
        }
    }
}
