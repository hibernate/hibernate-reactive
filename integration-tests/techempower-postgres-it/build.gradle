buildscript {
	repositories {
		// Example: ./gradlew build -PenableMavenLocalRepo
		if ( project.hasProperty( 'enableMavenLocalRepo' ) ) {
			// Useful for local development, it should be disabled otherwise
			mavenLocal()
		}
		mavenCentral()
	}
}

plugins {
	id "hr-java-library"
	id "hr-test-containers"
}

test {
	def db = project.properties['db']
	enabled = db == null || db.equals( 'PostgreSQL' )
}

description = 'TechEmpower integration tests'

dependencies {
	implementation project( ':hibernate-reactive-core' )
	implementation(libs.io.vertx.vertx.web)
	implementation(libs.io.vertx.vertx.web.client)

	runtimeOnly(libs.io.vertx.vertx.pg.client)
	// The Pg client requires this dependency
	runtimeOnly(libs.com.ongres.scram.scram.client)
	runtimeOnly(libs.com.fasterxml.jackson.core.jackson.databind)

	// logging
	implementation(libs.org.jboss.logging.jboss.logging)

	// Testcontainers
	implementation(libs.org.testcontainers.postgresql)

	// Testing
	testImplementation(libs.org.assertj.assertj.core)
	testImplementation(libs.io.vertx.vertx.junit5)
}

def javaMainClass = "org.hibernate.reactive.it.techempower.VertxServer"
jar {
	dependsOn = [':hibernate-reactive-core:jar']
	archiveFileName = "${project.name}.jar"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes 'Main-Class': javaMainClass
		attributes 'Implementation-Version': project.version
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree( it ) }
	}
}

tasks.register( "startVertx", JavaExec ) {
	description = "Starts the Vert.x Server app"
	classpath = sourceSets.main.runtimeClasspath
	mainClass = javaMainClass
}
