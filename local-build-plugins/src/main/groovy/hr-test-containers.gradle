import org.hibernate.reactive.env.TestDbTask

def dbs = ['MariaDB', 'MySQL', 'PostgreSQL', 'DB2', 'CockroachDB', 'MSSQLServer', 'Oracle']

// create a task for each DB, now is static configure and not dynamic with rule pattern
// and run the tests on the selected db
// Example:
// gradlew testDbMySQL testDbDB2
dbs.each { db ->
	tasks.register( "testDb${db}", TestDbTask ) {
		dbName = db
		description = "Run tests for ${db}"
	}
}

// replace default task 'test' with custom TestDbTask to always configure with cache safe task
tasks.replace( "test", TestDbTask ).configure {
	dbName = project.findProperty( "db" ) ?: "PostgreSQL"
	dockerEnabled = project.hasProperty( "docker" )
	if ( project.hasProperty( "includeTests" ) ) {
		includeTests = project.property( "includeTests" )
	}
	description = "Default test task using TestDbTask"
}

// configure all testDbTask with docker and filter test
tasks.withType( TestDbTask ).configureEach {
	dockerEnabled = project.hasProperty( 'docker' )
	if ( project.hasProperty( 'includeTests' ) ) {
		includeTests = project.property( 'includeTests' )
	}
}

// task with all database
tasks.register( "testAll", Test ) {
	description = "Run tests for ${dbs}"
	dependsOn( dbs.collect { "testDb${it}" } )
}
