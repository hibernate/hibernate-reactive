import org.hibernate.reactive.env.TestDbTask

def dbs = ['MariaDB', 'MySQL', 'PostgreSQL', 'DB2', 'CockroachDB', 'MSSQLServer', 'Oracle']

// create a task for each DB, now is static configure and not dynamic with rule pattern
// and run the tests on the selected db
// Example:
// gradlew testDbMySQL testDbDB2
dbs.each { db ->
	tasks.register( "testDb${db}", TestDbTask ) {
		dbName = db
		description = "Run tests for ${db}"
	}
}

// configure default task 'test' with same config of TestDbTask, with cache safe
tasks.named( "test", Test ).configure { t ->
	def dbName = providers.gradleProperty( "db" ).orElse( "PostgreSQL" )
	def dockerEnabled = providers.gradleProperty( "docker" ).isPresent()
	def includeTests = providers.gradleProperty( "includeTests" ).orNull
	def showStandardStreams = providers.gradleProperty( "showStandardOutput" ).isPresent()

	t.systemProperty( "db", dbName.get() )
	t.systemProperty( "docker", dockerEnabled ? "true" : "false" )
	t.systemProperty( "org.hibernate.reactive.common.InternalStateAssertions.ENFORCE", "true" )

	if ( includeTests ) {
		t.filter { f -> f.includeTestsMatching( includeTests ) }
	}

	t.defaultCharacterEncoding = "UTF-8"
	t.useJUnitPlatform()
	t.testLogging {
		it.showStandardStreams = showStandardStreams
		it.showStackTraces = true
		it.exceptionFormat = 'full'
		it.displayGranularity = 1
		it.events = ['PASSED', 'FAILED', 'SKIPPED']
	}

	t.addTestListener( new TestListener() {
		void beforeSuite(TestDescriptor suite) {
			/* Do nothing */
		}

		void beforeTest(TestDescriptor testDescriptor) {
			/* Do nothing */
		}

		void afterTest(TestDescriptor testDescriptor, TestResult result) {
			/* Do nothing */
		}

		// Add afterSuite hook
		void afterSuite(TestDescriptor desc, TestResult result) {
			if ( !desc.parent ) {
				def output = "${dbName.get()} results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def line = '-' * (output.length() + 1)
				logger.lifecycle( "\n${line}\n${output}\n${line}" )
			}
		}
	} )
}

// configure all testDbTask with docker and filter test
tasks.withType( TestDbTask ).configureEach {
	dockerEnabled = project.hasProperty( 'docker' )
	if ( project.hasProperty( 'includeTests' ) ) {
		includeTests = project.property( 'includeTests' )
	}
}

// task with all database
tasks.register( "testAll", Test ) {
	description = "Run tests for ${dbs}"
	dependsOn( dbs.collect { "testDb${it}" } )
}
