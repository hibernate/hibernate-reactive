apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

// Java / publishing

java {
    // include javadoc and sources jar in the Java component
    // 		- classes jar included by default
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes(
                // Basic JAR manifest attributes
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': 'Hibernate.org',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Hibernate.org',
                'Implementation-Vendor-Id': 'org.hibernate',
                'Implementation-Url': 'http://hibernate.org/reactive',
        )
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
    publications {
        publishedArtifacts(MavenPublication) {
            from components.java

            pom {
                name = project.mavenPomName
                description = project.description
                url = 'https://github.com/hibernate/hibernate-reactive'
                organization {
                    name = 'Hibernate.org'
                    url = 'https://hibernate.org'
                }
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://opensource.org/licenses/Apache-2.0'
                        comments = 'See discussion at http://hibernate.org/community/license/ for more details.'
                        distribution = 'repo'
                    }
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/hibernate/hibernate-reactive/issues'
                }
                scm {
                    connection = 'scm:git:ssh://git@github.com/hibernate/hibernate-reactive.git'
                    developerConnection = 'scm:git:ssh://git@github.com/hibernate/hibernate-reactive.git'
                    url = 'https://github.com/hibernate/hibernate-reactive.git'
                }
                developers {
                    developer {
                        id = 'hibernate-team'
                        name = 'The Hibernate Development Team'
                        organization = 'Hibernate.org'
                        organizationUrl = 'https://hibernate.org'
                    }
                }
            }
        }
    }
}


// signing

var signingExtension = project.getExtensions().getByType(SigningExtension) as SigningExtension

// create a `signPublications` "grouping" task which will execute all Sign tasks
def signPublicationsTask = tasks.register('signPublications')
tasks.named( "publishPublishedArtifactsPublicationToSonatypeRepository" ) {
    dependsOn signPublicationsTask
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    boolean wasSigningRequested = false
    boolean wasPublishingRequested = false
    List<Sign> signingTasks = []

    graph.allTasks.each {task ->
        logger.lifecycle( "Checking task : $task" )
        if ( task instanceof Sign ) {
            logger.lifecycle( "    - Task is Sign" )
            signingTasks.add( task )
            wasSigningRequested = true
        }
        else if ( task instanceof PublishToMavenRepository ) {
            logger.lifecycle( "    - Task is PublishToMavenRepository" )
            wasPublishingRequested = true
        }
    }

    if ( wasPublishingRequested ) {
        logger.lifecycle "Publishing groupId: '" + project.group + "', version: '" + project.version + "'"
    }

    if ( wasSigningRequested || wasPublishingRequested ) {
        // signing was explicitly requested and/or we are publishing to Sonatype OSSRH
        // 		- we need the signing to happen
        signingExtension.required = true

        var signingKey = resolveSigningKey()
        var signingPassword = resolveSigningPassphrase()
        signingExtension.useInMemoryPgpKeys( signingKey, signingPassword )
        signingExtension.sign publishing.publications.publishedArtifacts

        signPublicationsTask.get().dependsOn( signingTasks )
    }
    else {
        // signing was not explicitly requested and we are not publishing to OSSRH,
        // 		- disable all Sign tasks
        signingTasks.each { enabled = false }
    }
}


static String resolveSigningKey() {
    var key = System.getenv().get( "SIGNING_GPG_PRIVATE_KEY" )
    if ( key != null ) {
        return key
    }

    var keyFile = System.getenv().get( "SIGNING_GPG_PRIVATE_KEY_PATH" )
    if ( keyFile != null ) {
        return new File( keyFile ).text
    }

    throw new RuntimeException( "Cannot perform signing without GPG details." )
}

static String resolveSigningPassphrase() {
    var passphrase = System.getenv().get( "SIGNING_GPG_PASSPHRASE" )
    if ( passphrase == null ) {
        throw new RuntimeException( "Cannot perform signing without GPG details." )
    }
    return passphrase
}
