import java.nio.charset.StandardCharsets

plugins {
    id "hr-java-library"
}

description = 'Release module'
// (Optional) before uploading the documentation, you can check
// the generated website under release/build/hibernate.org with:
// ./gradlew gitPublishCopy

// The generated documentation are copied to the
// rootProject.layout.buildDirectory.dir("staging-deploy/documentation") by the updateDocumentationTask
// while the publishing is delegated to the https://github.com/hibernate/hibernate-release-scripts

// To tag a version and trigger a release on CI (which will include publishing to Bintray and publishing documentation):
//  ./gradlew ciRelease -PreleaseVersion=x.y.z.Final -PdevelopmentVersion=x.y.z-SNAPSHOT -PgitRemote=origin -PgitBranch=main

// The folder containing the rendered documentation
final Directory documentationDir = project(":documentation").layout.buildDirectory.get()

// Relative path on the static website where the documentation is located
final String docWebsiteRelativePath = "reactive/documentation/${projectVersion.family}"

def releaseChecksTask = tasks.register( "releaseChecks" ) {
    description 'Checks and preparation for release'
    group 'Release'

    doFirst {
        logger.lifecycle("Checking that the working tree is clean...")
        String uncommittedFiles = executeGitCommand('status', '--porcelain')
        if (!uncommittedFiles.isEmpty()) {
            throw new GradleException(
                    "Cannot release because there are uncommitted or untracked files in the working tree.\n" +
                            "Commit or stash your changes first.\n" +
                            "Uncommitted files:\n    " +
                            uncommittedFiles
            )
        }

        String gitBranchLocal = project.hasProperty( 'gitBranch' ) && !project.property( 'gitBranch' ).isEmpty()
                ? project.property( 'gitBranch' )
                : executeGitCommand( 'branch', '--show-current' ).trim()

        String gitRemoteLocal
        if ( project.hasProperty( 'gitRemote' ) && !project.property( 'gitRemote' ).isEmpty() ) {
            gitRemoteLocal = project.property( 'gitRemote' )
        }
        else {
            final String remotes = executeGitCommand( 'remote', 'show' ).trim()
            final List<String> tokens = remotes.tokenize()
            if ( tokens.size() != 1 ) {
                throw new GradleException( "Could not determine `gitRemote` property for `releaseChecks` tasks." )
            }
            gitRemoteLocal = tokens.get( 0 )
        }

        project.ext {
            gitBranch = gitBranchLocal
            gitRemote = gitRemoteLocal
        }

        logger.lifecycle( "Switching to branch '${project.gitBranch}'..." )
        executeGitCommand( 'checkout', project.gitBranch )

        logger.lifecycle( "Checking that all commits are pushed..." )
        String diffWithUpstream = executeGitCommand( 'diff', '@{u}' )
        if ( !diffWithUpstream.isEmpty() ) {
            throw new GradleException(
                    "Cannot perform `ciRelease` tasks because there are un-pushed local commits .\n" +
                            "Push your commits first."
            )
        }
    }
}

/**
 * Assembles all documentation into the {buildDir}/documentation directory.
 */
def assembleDocumentationTask = tasks.register( 'assembleDocumentation' ) {
    dependsOn ':documentation:assemble'
    group 'Documentation'
    description 'Render the documentation'
}
assemble.dependsOn assembleDocumentationTask

def changeToReleaseVersionTask = tasks.register( 'changeToReleaseVersion' ) {
    description 'Updates `gradle/version.properties` file to the specified release-version'
    group 'Release'

    dependsOn releaseChecksTask

    doFirst {
        logger.lifecycle( "Updating version-file to release-version : `${project.releaseVersion}`" )
        updateVersionFile( "${project.releaseVersion}" )
    }
}

def updateDocumentationTask = tasks.register( 'updateDocumentation' ) {
    description "Update the documentation on the cloned static website"
    dependsOn assembleDocumentationTask
    mustRunAfter changeToReleaseVersion

    // copy documentation outputs into target/documentation:
    // * this is used in building the dist bundles
    // * it is also used as a base to build a staged directory for documentation upload

    doLast {
        // Aggregated JavaDoc
		copy {
			from documentationDir.dir("javadocs")
			into rootProject.layout.buildDirectory.dir("staging-deploy/documentation/javadocs")
		}

        // Reference Documentation
		copy {
			from documentationDir.dir("asciidoc/reference/html_single")
			into rootProject.layout.buildDirectory.dir("staging-deploy/documentation/reference/html_single")
		}
    }
}

def gitPreparationForReleaseTask = tasks.register( 'gitPreparationForRelease' ) {
    dependsOn releaseChecksTask, changeToReleaseVersionTask
    finalizedBy updateDocumentationTask

    doLast {
        logger.lifecycle( "Performing pre-steps Git commit : `${project.releaseVersion}`" )
        executeGitCommand( 'add', '.' )
        executeGitCommand( 'commit', '-m', "Update project version to : `${project.releaseVersion}`" )
    }
}

def changeToDevelopmentVersionTask = tasks.register( 'changeToDevelopmentVersion' ) {
    description 'Updates `gradle/version.properties` file to the specified development-version'
    group 'Release'

    dependsOn releaseChecksTask

    doFirst {
        logger.lifecycle( "Updating version-file to development-version : `${project.developmentVersion}`" )
        updateVersionFile( "${project.developmentVersion}" )
    }
}

def releasePreparePostGitTask = tasks.register( 'gitTasksAfterRelease' ) {
    dependsOn changeToDevelopmentVersionTask

    doLast {
        if ( project.createTag ) {
            logger.lifecycle( "Tagging release : `${project.releaseTag}`..." )
            executeGitCommand( 'tag', '-a', project.releaseTag, '-m', "Release $project.projectVersion" )
        }

        logger.lifecycle( "Performing post-steps Git commit : `${project.releaseVersion}`" )
        executeGitCommand( 'add', '.' )
        executeGitCommand( 'commit', '-m', "Update project version to : `${project.developmentVersion}`" )
    }
}

void updateVersionFile(var version) {
    logger.lifecycle( "Updating `gradle/version.properties` version to `${version}`" )
    project.versionFile.text = "projectVersion=${version}"
    project.version = version
}

def publishReleaseArtifactsTask = tasks.register( 'publishReleaseArtifacts' ) {
    dependsOn updateDocumentationTask

    mustRunAfter gitPreparationForReleaseTask
}

def releasePerformPostGitTask = tasks.register( 'gitTasksAfterReleasePerform' ) {

    doLast {
        if ( project.createTag ) {
            logger.lifecycle( "Pushing branch and tag to remote `${project.gitRemote}`..." )
            executeGitCommand( 'push', '--atomic', project.gitRemote, project.gitBranch, project.releaseTag )
        }
        else {
            logger.lifecycle( "Pushing branch to remote `${project.gitRemote}`..." )
            executeGitCommand( 'push', project.gitRemote, project.gitBranch )
        }
    }
}

def releasePrepareTask = tasks.register( "releasePrepare" ) {
    description "On a local checkout, performs all the changes required for the release, website updates included"
    group "Release"

    dependsOn gitPreparationForReleaseTask

    finalizedBy releasePreparePostGitTask
}

def releasePerformTask = tasks.register( 'releasePerform' ) {
    group 'Release'
    description 'Performs a release on local check-out, including updating changelog and '

    dependsOn publishReleaseArtifactsTask

    finalizedBy releasePerformPostGitTask
}

/*
* Release everything
*/
def releaseTask = tasks.register( 'release' ) {
    description 'Performs a release on local check-out'
    group 'Release'

    dependsOn releasePrepareTask
    dependsOn releasePerformTask
}

def ciReleaseTask = tasks.register( 'ciRelease' ) {
    description "Triggers the release on CI: creates commits to change the version (release, then development), creates a tag, pushes everything. Then CI will take over and perform the release."
    group "Release"

    dependsOn releaseTask
}

static String executeGitCommand(Object ... subcommand){
    List<Object> command = ['git']
    Collections.addAll( command, subcommand )
    def proc = command.execute()
    def code = proc.waitFor()
    def stdout = inputStreamToString( proc.getInputStream() )
    def stderr = inputStreamToString( proc.getErrorStream() )
    if ( code != 0 ) {
        throw new GradleException( "An error occurred while executing " + command + "\n\nstdout:\n" + stdout + "\n\nstderr:\n" + stderr )
    }
    return stdout
}

static String inputStreamToString(InputStream inputStream) {
    inputStream.withCloseable { ins ->
        new BufferedInputStream(ins).withCloseable { bis ->
            new ByteArrayOutputStream().withCloseable { buf ->
                int result = bis.read()
                while (result != -1) {
                    buf.write((byte) result)
                    result = bis.read()
                }
                return buf.toString(StandardCharsets.UTF_8.name())
            }
        }
    }
}

gradle.getTaskGraph().whenReady { tg->
    if ( ( tg.hasTask( project.tasks.releasePrepare ) || tg.hasTask( project.tasks.releasePerform ) )
            && ! project.getGradle().getStartParameter().isDryRun() ) {
        String releaseVersionLocal
        String developmentVersionLocal

        def console = tg.hasTask( project.tasks.release ) && !tg.hasTask( project.tasks.ciRelease )
                ? System.console()
                : null

        if (project.hasProperty('releaseVersion')) {
            releaseVersionLocal = project.property('releaseVersion')
        }
        else {
            if (console) {
                // prompt for `releaseVersion`
                releaseVersionLocal = console.readLine('> Enter the release version: ')
            }
            else {
                throw new GradleException(
                        "`release`-related tasks require the following properties: 'releaseVersion', 'developmentVersion'"
                )
            }
        }

        if (project.hasProperty('developmentVersion')) {
            developmentVersionLocal = project.property('developmentVersion')
        }
        else {
            if (console) {
                // prompt for `developmentVersion`
                developmentVersionLocal = console.readLine('> Enter the next development version: ')
            }
            else {
                throw new GradleException(
                        "`release`-related tasks require the following properties: 'releaseVersion', 'developmentVersion'"
                )
            }
        }

        assert releaseVersionLocal != null && developmentVersionLocal != null

        // set up information for the release-related tasks
        project.ext {
            releaseVersion = releaseVersionLocal
            developmentVersion = developmentVersionLocal
            createTag = !project.hasProperty('noTag')
            releaseTag = project.createTag ? determineReleaseTag(releaseVersionLocal) : ''
        }
    }
}

static String determineReleaseTag(String releaseVersion) {
    return releaseVersion.endsWith( '.Final' )
            ? releaseVersion.replace( ".Final", "" )
            : releaseVersion
}
