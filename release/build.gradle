import java.nio.charset.StandardCharsets

description = 'Release module'

// Usage: ./gradlew ciRelease -PreleaseVersion=x.y.z.Final -PdevelopmentVersion=x.y.z-SNAPSHOT -PgitRemote=origin
task ciRelease {
    group = "Release"
    description = "Triggers the release on CI: creates commits to change the version (release, then development), creates a tag, pushes everything. Then CI will take over and perform the release."

    doFirst {
        if (!project.hasProperty('releaseVersion') || !project.hasProperty('developmentVersion') || !project.hasProperty('gitRemote')) {
            throw new GradleException(
                    "The ciRelease task requires the 'releaseVersion', 'developmentVersion' and 'gitRemote' parameters."
            )
        }
    }

    doLast {
        println("Checking that the working tree is clean...")
        String uncommittedFiles = executeGitCommand('status', '--porcelain')
        if ( !uncommittedFiles.isEmpty() ) {
            throw new GradleException(
                    "Cannot release because there are uncommitted or untracked files in the working tree."
                            + "\nCommit or stash your changes first."
                            + "\nUncommitted files:\n" + uncommittedFiles
            );
        }

        println("Checking that all commits are pushed...")
        String diffWithUpstream = executeGitCommand('diff', '@{u}')
        if ( !diffWithUpstream.isEmpty() ) {
            throw new GradleException(
                    "Cannot release because there are commits on the branch to release that haven't been pushed yet."
                            + "\nPush your commits to the branch to release first."
            );
        }

        println("Adding commit to update version to '${project.releaseVersion}'...")
        project.projectVersionFile.text = "projectVersion=${project.releaseVersion}"
        executeGitCommand('add', '.')
        executeGitCommand('commit', '-m', project.releaseVersion)
        String tag = project.releaseVersion
        if ( tag.endsWith( ".Final" ) ) {
            tag = tag.replace( ".Final", "" )
        }

        println("Tagging '${tag}'...")
        executeGitCommand('tag', '-a', '-m', "Release ${project.releaseVersion}", tag)

        println("Adding commit to update version to '${project.developmentVersion}'...")
        project.projectVersionFile.text = "projectVersion=${project.developmentVersion}"
        executeGitCommand('add', '.')
        executeGitCommand('commit', '-m', project.developmentVersion)

        println("Pushing branch to remote '${project.gitRemote}'...")
        executeGitCommand('push', project.gitRemote)

        println("Pushing tag '${tag}' to remote '${project.gitRemote}'...")
        executeGitCommand('push', project.gitRemote, tag)

        println("Done!")

        println("Go to https://github.com/hibernate/hibernate-reactive/actions?query=branch%3A${tag} to check the progress of the automated release.")
    }
}

static String executeGitCommand(Object ... subcommand){
    List<Object> command = ['git']
    Collections.addAll( command, subcommand )
    def proc = command.execute()
    def code = proc.waitFor()
    def stdout = inputStreamToString( proc.getInputStream() )
    def stderr = inputStreamToString( proc.getErrorStream() )
    if ( code != 0 ) {
        throw new GradleException( "An error occurred while executing " + command + "\n\nstdout:\n" + stdout + "\n\nstderr:\n" + stderr )
    }
    return stdout
}

static String inputStreamToString(InputStream inputStream) {
    inputStream.withCloseable { ins ->
        new BufferedInputStream(ins).withCloseable { bis ->
            new ByteArrayOutputStream().withCloseable { buf ->
                int result = bis.read();
                while (result != -1) {
                    buf.write((byte) result);
                    result = bis.read();
                }
                return buf.toString(StandardCharsets.UTF_8.name());
            }
        }
    }
}
