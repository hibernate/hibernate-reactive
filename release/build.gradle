import java.nio.charset.StandardCharsets

description = 'Release module'

// To publish documentation:
//  1. Add the relevant SSH key to your SSH agent.
//  2. Execute this:
//    ./gradlew uploadDocumentation -PjbossFilemgmtSshUser="<YOUR USERNAME>"

// To tag a version and trigger a release on CI (which will include publishing to Bintray and publishing documentation):
//  ./gradlew ciRelease -PreleaseVersion=x.y.z.Final -PdevelopmentVersion=x.y.z-SNAPSHOT -PgitRemote=origin -PgitBranch=master

final File documentationDir = mkdir( "${project.buildDir}/documentation" );

/**
 * Assembles all documentation into the {buildDir}/documentation directory.
 */
task assembleDocumentation(dependsOn: [rootProject.project( 'documentation' ).tasks.assemble]) {
    description = 'Assembles all documentation into the {buildDir}/documentation directory'

    doLast {
        // copy documentation outputs into target/documentation.
        // 		* this is used in building the dist bundles
        //		* it is also used as a base to build a staged directory for documentation upload

        // Aggregated JavaDoc
        copy {
            from "${rootProject.project( 'documentation' ).buildDir}/javadocs"
            into "${documentationDir}/javadocs"
        }

        // Reference Documentation
        copy {
            from "${rootProject.project( 'documentation' ).buildDir}/asciidoc/reference"
            into "${documentationDir}/reference"
        }
    }
}
assemble.dependsOn assembleDocumentation

/**
 * Upload the documentation to the JBoss doc server
 */
task uploadDocumentation(type:Exec, dependsOn: assembleDocumentation) {
    description = "Uploads documentation to the JBoss doc server"

    final String url = "filemgmt.jboss.org:/docs_htdocs/hibernate/reactive/${project.version.family}"

    executable 'rsync'
    args '-avz', '--delete', '--links', '--protocol=28', "${documentationDir.absolutePath}/", url

    doFirst {
        if ( project.version.isSnapshot() ) {
            logger.error( "Cannot perform upload of SNAPSHOT documentation" );
            throw new RuntimeException( "Cannot perform upload of SNAPSHOT documentation" );
        }
        else {
            logger.lifecycle( "Uploading documentation to '${url}'..." )
        }
    }

    doLast {
        logger.lifecycle( 'Done uploading documentation' )
    }
}

task ciRelease {
    group = "Release"
    description = "Triggers the release on CI: creates commits to change the version (release, then development), creates a tag, pushes everything. Then CI will take over and perform the release."

    doFirst {
        if (!project.hasProperty('releaseVersion') || !project.hasProperty('developmentVersion')
                || !project.hasProperty('gitRemote') ||!project.hasProperty('gitBranch')) {
            throw new GradleException(
                    "Task 'ciRelease' requires all of the following properties to be set:"
                            + "'releaseVersion', 'developmentVersion', 'gitRemote' and 'gitBranch'."
            )
        }
    }

    doLast {
        println("Checking that the working tree is clean...")
        String uncommittedFiles = executeGitCommand('status', '--porcelain')
        if ( !uncommittedFiles.isEmpty() ) {
            throw new GradleException(
                    "Cannot release because there are uncommitted or untracked files in the working tree."
                            + "\nCommit or stash your changes first."
                            + "\nUncommitted files:\n" + uncommittedFiles
            );
        }

        println("Switching to branch '${project.gitBranch}'...")
        executeGitCommand('switch', project.gitBranch)

        println("Checking that all commits are pushed...")
        String diffWithUpstream = executeGitCommand('diff', '@{u}')
        if ( !diffWithUpstream.isEmpty() ) {
            throw new GradleException(
                    "Cannot release because there are commits on the branch to release that haven't been pushed yet."
                            + "\nPush your commits to the branch to release first."
            );
        }

        println("Adding commit to update version to '${project.releaseVersion}'...")
        project.projectVersionFile.text = "projectVersion=${project.releaseVersion}"
        executeGitCommand('add', '.')
        executeGitCommand('commit', '-m', project.releaseVersion)
        String tag = project.releaseVersion
        if ( tag.endsWith( ".Final" ) ) {
            tag = tag.replace( ".Final", "" )
        }

        println("Tagging '${tag}'...")
        executeGitCommand('tag', '-a', '-m', "Release ${project.releaseVersion}", tag)

        println("Adding commit to update version to '${project.developmentVersion}'...")
        project.projectVersionFile.text = "projectVersion=${project.developmentVersion}"
        executeGitCommand('add', '.')
        executeGitCommand('commit', '-m', project.developmentVersion)

        println("Pushing branch and tag to remote '${project.gitRemote}'...")
        executeGitCommand('push', '--atomic', project.gitRemote, project.gitBranch, tag)

        println("Done!")

        println("Go to https://github.com/hibernate/hibernate-reactive/actions?query=branch%3A${tag} to check the progress of the automated release.")
    }
}

static String executeGitCommand(Object ... subcommand){
    List<Object> command = ['git']
    Collections.addAll( command, subcommand )
    def proc = command.execute()
    def code = proc.waitFor()
    def stdout = inputStreamToString( proc.getInputStream() )
    def stderr = inputStreamToString( proc.getErrorStream() )
    if ( code != 0 ) {
        throw new GradleException( "An error occurred while executing " + command + "\n\nstdout:\n" + stdout + "\n\nstderr:\n" + stderr )
    }
    return stdout
}

static String inputStreamToString(InputStream inputStream) {
    inputStream.withCloseable { ins ->
        new BufferedInputStream(ins).withCloseable { bis ->
            new ByteArrayOutputStream().withCloseable { buf ->
                int result = bis.read();
                while (result != -1) {
                    buf.write((byte) result);
                    result = bis.read();
                }
                return buf.toString(StandardCharsets.UTF_8.name());
            }
        }
    }
}
