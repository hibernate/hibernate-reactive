import java.nio.charset.StandardCharsets

ext {
    // Select which repository to use for publishing the documentation
    // Example:
    // ./gradlew publishDocumentation \
    //           -PdocPublishRepoUri="git@github.com:DavideD/hibernate.org.git" \
    //           -PdocPublishBranch="staging"
    if ( !project.hasProperty('docPublishRepoUri') ) {
        docPublishRepoUri = 'git@github.com:hibernate/hibernate.org.git'
    }
    if ( !project.hasProperty('docPublishBranch') ) {
        docPublishBranch = 'staging'
    }
}

description = 'Release module'
// (Optional) before uploading the documentation, you can check
// the generated website under release/build/hibernate.org with:
// ./gradlew gitPublishCopy

// To publish the documentation:
//  1. Add the relevant SSH key to your SSH agent.
//  2. Execute this:
//     ./gradlew publishDocumentation -PdocPublishBranch=production

// To tag a version and trigger a release on CI (which will include publishing to Bintray and publishing documentation):
//  ./gradlew ciRelease -PreleaseVersion=x.y.z.Final -PdevelopmentVersion=x.y.z-SNAPSHOT -PgitRemote=origin -PgitBranch=main

// The folder containing the rendered documentation
final String documentationDir = "${rootProject.project( 'documentation' ).buildDir}"

// The location of the docs when the website has been cloned
final String docWebsiteReactiveFolder = "${project.buildDir}/docs-website/reactive/documentation/${projectVersion.family}"

/**
 * Assembles all documentation into the {buildDir}/documentation directory.
 */
task assembleDocumentation(dependsOn: [rootProject.project( 'documentation' ).tasks.assemble]) {
    group = 'Documentation'
    description = 'Render the documentation'
}
assemble.dependsOn assembleDocumentation

/**
* Clone the website
*/
task removeDocWebsite( type: Exec ) {
    workingDir project.buildDir
    commandLine 'rm', '-rf', 'docs-website'
}

task cloneDocsWebsite( type: Exec, dependsOn: removeDocWebsite ) {
    workingDir project.buildDir
    commandLine 'git', 'clone', "$docPublishRepoUri", '--sparse', 'docs-website'
}

task switchDocBranch( type: Exec, dependsOn: cloneDocsWebsite ) {
    workingDir "$project.buildDir/docs-website"
    commandLine 'git', 'switch', "$docPublishBranch"
}

task sparseCheckoutDocumentation( type: Exec, dependsOn: switchDocBranch ) {
    workingDir "$project.buildDir/docs-website"
    commandLine 'git', 'sparse-checkout', 'set', "reactive/$projectVersion.family"
}

/**
* Update the docs on the cloned website
*/
task updateDocumentation( dependsOn: [assembleDocumentation, sparseCheckoutDocumentation] ) {
    description = "Update the documentation o the cloned static website"

    // copy documentation outputs into target/documentation:
    // * this is used in building the dist bundles
    // * it is also used as a base to build a staged directory for documentation upload

    doLast {
        // delete the folders in case some files have been removed
        delete "${docWebsiteReactiveFolder}/javadocs", "${docWebsiteReactiveFolder}/reference"

        // Aggregated JavaDoc
        copy {
            from "${documentationDir}/javadocs"
            into "${docWebsiteReactiveFolder}/javadocs"
        }

        // Reference Documentation
        copy {
            from "${documentationDir}/reference"
            into "${docWebsiteReactiveFolder}/reference"
        }
    }
}

/**
* Push documentation changes on the remote repository
*/
task stageDocChanges( type: Exec, dependsOn: updateDocumentation ) {
    workingDir "$project.buildDir/docs-website"
    commandLine 'git', 'add', '-A', '--sparse', '.'
}

task commitDocChanges( type: Exec, dependsOn: stageDocChanges ) {
    workingDir "$project.buildDir/docs-website"
    commandLine 'git', 'commit', '-m', "[HR] Hibernate Reactive documentation for ${projectVersion}"
}

task pushDocChanges( type: Exec, dependsOn: commitDocChanges ) {
    workingDir "$project.buildDir/docs-website"
    commandLine 'git', 'push', '--atomic', 'origin', "$docPublishBranch"
}

task publishDocumentation(dependsOn: pushDocChanges) {
    group = "Release"
    description = "Upload documentation on the website"

    doLast {
        logger.lifecycle "Documentation published on '${docPublishRepoUri}' branch '${docPublishBranch}'"
    }
}

/*
* Release everything
*/
task ciRelease {
    group = "Release"
    description = "Triggers the release on CI: creates commits to change the version (release, then development), creates a tag, pushes everything. Then CI will take over and perform the release."

    doFirst {
        if (!project.hasProperty('releaseVersion') || !project.hasProperty('developmentVersion')
                || !project.hasProperty('gitRemote') ||!project.hasProperty('gitBranch')) {
            throw new GradleException(
                    "Task 'ciRelease' requires all of the following properties to be set:"
                            + "'releaseVersion', 'developmentVersion', 'gitRemote' and 'gitBranch'."
            )
        }
    }

    doLast {
        logger.lifecycle("Checking that the working tree is clean...")
        String uncommittedFiles = executeGitCommand('status', '--porcelain')
        if ( !uncommittedFiles.isEmpty() ) {
            throw new GradleException(
                    "Cannot release because there are uncommitted or untracked files in the working tree."
                            + "\nCommit or stash your changes first."
                            + "\nUncommitted files:\n" + uncommittedFiles
            )
        }

        logger.lifecycle("Switching to branch '${project.gitBranch}'...")
        executeGitCommand('switch', project.gitBranch)

        logger.lifecycle("Checking that all commits are pushed...")
        String diffWithUpstream = executeGitCommand('diff', '@{u}')
        if ( !diffWithUpstream.isEmpty() ) {
            throw new GradleException(
                    "Cannot release because there are commits on the branch to release that haven't been pushed yet."
                            + "\nPush your commits to the branch to release first."
            )
        }

        logger.lifecycle("Adding commit to update version to '${project.releaseVersion}'...")
        project.projectVersionFile.text = "projectVersion=${project.releaseVersion}"
        executeGitCommand('add', '.')
        executeGitCommand('commit', '-m', project.releaseVersion)
        String tag = project.releaseVersion
        if ( tag.endsWith( ".Final" ) ) {
            tag = tag.replace( ".Final", "" )
        }

        logger.lifecycle("Tagging '${tag}'...")
        executeGitCommand('tag', '-a', '-m', "Release ${project.releaseVersion}", tag)

        logger.lifecycle("Adding commit to update version to '${project.developmentVersion}'...")
        project.projectVersionFile.text = "projectVersion=${project.developmentVersion}"
        executeGitCommand('add', '.')
        executeGitCommand('commit', '-m', project.developmentVersion)

        logger.lifecycle("Pushing branch and tag to remote '${project.gitRemote}'...")
        executeGitCommand('push', '--atomic', project.gitRemote, project.gitBranch, tag)

        logger.lifecycle("Done!")

        logger.lifecycle("Go to https://github.com/hibernate/hibernate-reactive/actions?query=branch%3A${tag} to check the progress of the automated release.")
    }
}

static String executeGitCommand(Object ... subcommand){
    List<Object> command = ['git']
    Collections.addAll( command, subcommand )
    def proc = command.execute()
    def code = proc.waitFor()
    def stdout = inputStreamToString( proc.getInputStream() )
    def stderr = inputStreamToString( proc.getErrorStream() )
    if ( code != 0 ) {
        throw new GradleException( "An error occurred while executing " + command + "\n\nstdout:\n" + stdout + "\n\nstderr:\n" + stderr )
    }
    return stdout
}

static String inputStreamToString(InputStream inputStream) {
    inputStream.withCloseable { ins ->
        new BufferedInputStream(ins).withCloseable { bis ->
            new ByteArrayOutputStream().withCloseable { buf ->
                int result = bis.read()
                while (result != -1) {
                    buf.write((byte) result)
                    result = bis.read()
                }
                return buf.toString(StandardCharsets.UTF_8.name())
            }
        }
    }
}
